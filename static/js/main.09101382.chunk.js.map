{"version":3,"sources":["XFadeMaterial.js","Scene.js","App.js","index.js"],"names":["XFadeMaterial","shaderMaterial","texture1","texture2","shownTxt","resolution","THREE","CrossFadeMaterial","props","ref","useRef","useThree","size","gl","dpr","useMemo","getPixelRatio","useFrame","current","lerp","width","height","defines","FXAA","capabilities","isWebGL2","extend","transitions","from","rotation","Math","PI","scale","enter","leave","Model","model","rEuler","rQuaternion","state","set","mouse","x","y","quaternion","slerp","setFromEuler","intensity","position","decay","primitive","object","scene","RenderScene","target","camRef","setRenderTarget","render","createPortal","Models","modelIndex","models","useGLTF","useState","idxesInScenes","hiddenTxt","indexOf","idx","t0","useFBO","stencilBuffer","multisample","t1","targets","camera","transitionSprings","useTransition","expires","PerspectiveCamera","far","fov","ScreenQuad","attach","texture","i","Scene","fallback","fixedStyle","objects","map","k","toLowerCase","fakeObjects","split","Item","text","onHover","index","active","has3d","className","onPointerEnter","App","events","onGotPointerCaptureLegacy","setIdx","modelIdx","concurrent","pixelRatio","onCreated","style","o","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.09101382.chunk.js","sourcesContent":["import React, { useMemo, useRef } from 'react'\nimport { extend, useThree, useFrame } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport { shaderMaterial } from '@react-three/drei'\nimport glsl from 'babel-plugin-glsl/macro'\n\nconst XFadeMaterial = shaderMaterial(\n  { texture1: null, texture2: null, shownTxt: -1, resolution: new THREE.Vector2() },\n  glsl`\n  void main() {\n    gl_Position = vec4(position,1.0);\n  }\n  `,\n  glsl`\n  #ifdef FXAA\n    #pragma glslify: fxaa = require(glsl-fxaa)\n  #endif\n\n  varying vec2 v_texCoord0;\n  \n  uniform vec2 resolution;\n  uniform sampler2D texture1;\n  uniform sampler2D texture2;\n  uniform float shownTxt;\n\n  void main() {\n    \n    #ifdef FXAA\n      vec4 _texture1 = fxaa(texture1, gl_FragCoord.xy, resolution);\n      vec4 _texture2 = fxaa(texture2, gl_FragCoord.xy, resolution);\n    #else\n      vec2 uv = gl_FragCoord.xy / resolution;\n      vec4 _texture1 = texture2D(texture1, uv);\n      vec4 _texture2 = texture2D(texture2, uv);\n    #endif\n\n    float opacity = shownTxt < 0. ? 1. + shownTxt : 1.;\n    float _shownTxt = shownTxt < 0. ? 0. : shownTxt;\n\n    vec4 finalTexture = mix(_texture1, _texture2, _shownTxt);\n    finalTexture =  vec4(finalTexture.rgb, opacity * finalTexture.a);\n    gl_FragColor = finalTexture;\n  }\n`\n)\n\nextend({ XFadeMaterial })\n\nexport default function CrossFadeMaterial({ shownTxt, ...props }) {\n  const ref = useRef()\n  const { size, gl } = useThree()\n\n  const dpr = useMemo(() => gl.getPixelRatio(), [gl])\n  useFrame(() => (ref.current.shownTxt = THREE.MathUtils.lerp(ref.current.shownTxt, shownTxt, 0.2)))\n\n  return (\n    <xFadeMaterial\n      ref={ref}\n      {...props}\n      resolution={[size.width * dpr, size.height * dpr]}\n      defines={{ FXAA: !gl.capabilities.isWebGL2 }}\n    />\n  )\n}\n","import * as THREE from 'three'\nimport React, { Suspense, useRef, useState, useMemo } from 'react'\nimport { useFrame, createPortal } from 'react-three-fiber'\nimport { useTransition } from '@react-spring/core'\nimport { a } from '@react-spring/three'\nimport { useGLTF, useFBO, ScreenQuad, PerspectiveCamera } from '@react-three/drei'\nimport CrossFadeMaterial from './XFadeMaterial'\n\nconst transitions = {\n  from: { rotation: [0, -Math.PI / 10, 0], scale: [0.8, 0.8, 0.8] },\n  enter: { rotation: [0, 0, 0], scale: [1, 1, 1] },\n  leave: { rotation: [0, Math.PI / 10, 0], scale: [0.8, 0.8, 0.8] }\n}\n\nfunction Model({ model, ...props }) {\n  const ref = useRef()\n  const [rEuler, rQuaternion] = useMemo(() => [new THREE.Euler(), new THREE.Quaternion()], [])\n\n  useFrame((state) => {\n    if (ref.current) {\n      rEuler.set(0, (state.mouse.x * Math.PI) / 150, (-state.mouse.y * Math.PI) / 150)\n      ref.current.quaternion.slerp(rQuaternion.setFromEuler(rEuler), 0.1)\n    }\n  })\n\n  return (\n    <group ref={ref}>\n      <pointLight intensity={0.6} position={[4, 6, -1]} decay={3} rotation={[2, 1, -2]} />\n      <a.primitive {...props} object={model.scene} />\n    </group>\n  )\n}\n\nfunction RenderScene({ target, model, camRef, ...props }) {\n  const scene = useMemo(() => new THREE.Scene(), [])\n\n  useFrame((state) => {\n    state.gl.setRenderTarget(target)\n    state.gl.render(scene, camRef.current)\n  }, 0)\n\n  return createPortal(<Model model={model} {...props} />, scene)\n}\n\nfunction Models({ modelIndex = 0 }) {\n  const models = useGLTF(['./stool.glb', './table.glb', './bench.glb'])\n\n  // this holds the indexes of the 3D models shown for the scenes\n  // [modelIdxForScene0, modelIdxForScene1]\n  const [idxesInScenes] = useState([modelIndex, 1])\n\n  // ref of the hidden texture target index\n  // in other words the idx of the scene NOT shown\n  const hiddenTxt = useRef(1)\n\n  // shown texture index will hold the ref of the scene\n  // we transition to, meaning shown on screen.\n  const shownTxt = useMemo(() => {\n    // if the none of the scenes feature the modelindex we set the current hidden texture\n    // (which will be the showing texture in the following render) to the modelIndex\n    if (idxesInScenes.indexOf(modelIndex) < 0) idxesInScenes[hiddenTxt.current] = modelIndex\n\n    // the shown texture is the scene holding the model index\n    const idx = idxesInScenes.indexOf(modelIndex)\n    // the hidden texture is obviously 0 when the shown scene is 1 and vice versa\n    hiddenTxt.current = idx ? 0 : 1\n    return idx\n  }, [modelIndex, idxesInScenes])\n\n  const t0 = useFBO({ stencilBuffer: false, multisample: true })\n  const t1 = useFBO({ stencilBuffer: false, multisample: true })\n  const targets = [t0, t1]\n\n  const camRef = useRef()\n  useFrame((state) => {\n    state.gl.setRenderTarget(null)\n    state.gl.render(state.scene, state.camera)\n  }, 1)\n\n  const transitionSprings = useTransition(shownTxt, { expires: false, ...transitions })\n\n  return (\n    <>\n      <PerspectiveCamera ref={camRef} position={[-2.5, 1.5, 2]} rotation={[-0.5, -1, -0.4]} far={12} fov={38} />\n      <ScreenQuad>\n        <CrossFadeMaterial attach=\"material\" texture1={t0.texture} texture2={t1.texture} shownTxt={shownTxt} />\n      </ScreenQuad>\n      {transitionSprings((props, i) => (\n        <RenderScene target={targets[i]} model={models[idxesInScenes[i]]} camRef={camRef} {...props} />\n      ))}\n    </>\n  )\n}\n\nexport default function Scene({ models, modelIndex }) {\n  return (\n    <Suspense fallback={null}>\n      <Models models={models} modelIndex={modelIndex} />\n    </Suspense>\n  )\n}\n","import React, { useState, useMemo } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport Scene from './Scene'\n\nconst fixedStyle = { position: 'fixed' }\nconst objects = ['Stool', 'Table', 'Bench']\nconst models = objects.map((k) => './' + k.toLowerCase() + '.glb')\n\nconst fakeObjects = 'Lamp base. Stool. Outside table. Dish drainer. Closet door. Table. Square stool. Clothes rack. Bench. Bird feeder. Shelf. Handeplane surfing. Marking knife. Cutting board. Watch display'.split(\n  '. '\n)\n\nconst Item = ({ text, onHover, index, active }) => {\n  const modelIdx = useMemo(() => objects.indexOf(text), [text])\n  const has3d = modelIdx > -1\n  return (\n    <span className={active ? 'active' : has3d ? '' : 'item'} onPointerEnter={() => has3d && onHover(index)}>\n      {text + '.'}\n    </span>\n  )\n}\n\nexport default function App() {\n  const [{ onGotPointerCaptureLegacy, ...events }, set] = useState({})\n  const [idx, setIdx] = useState(1)\n  const modelIdx = objects.indexOf(fakeObjects[idx])\n\n  return (\n    <>\n      <Canvas concurrent pixelRatio={[1, 2]} onCreated={({ events }) => set(events)} style={fixedStyle}>\n        <Scene modelIndex={modelIdx} models={models} />\n      </Canvas>\n      <div className=\"container\" {...events}>\n        {fakeObjects.map((o, i) => (\n          <Item key={i} text={o} active={i === idx} index={i} onHover={setIdx} />\n        ))}\n      </div>\n    </>\n  )\n}\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport './styles.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}